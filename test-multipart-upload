#!/usr/bin/env ruby

require 'aws-sdk'

MIN_PART_SIZE = 5 * 2**20 # MB. Doesn't apply to last part, which can be any size

def make_content_of_size(size)
  "x" * size
end

@bucket = ARGV[0]
@test_key_prefix = ARGV[1] || "test-multipart-upload"
@s3_client = Aws::S3::Client.new(region: "eu-west-1") # should be: region of bucket

part_sizes = [ 5 ]

def try_multipart_with_sizes(part_sizes)
  puts "Trying part sizes #{part_sizes.inspect}"

  bucket = @bucket
  key = @test_key_prefix + "." + Time.now.to_f.to_s
  s3_client = @s3_client

  upload = s3_client.create_multipart_upload(
    bucket: bucket,
    key: key,
  )

  parts = part_sizes.each_with_index.map do |size, index|
    part_number = index + 1

    r = s3_client.upload_part(
      bucket: bucket,
      key: key,
      upload_id: upload.upload_id,
      part_number: part_number,
      body: make_content_of_size(size),
      content_length: size,
    )

  #   r = s3_client.upload_part_copy(
  #     bucket: bucket,
  #     key: key,
  #     upload_id: upload.upload_id,
  #     part_number: part_number,
  #     copy_source: "bucket/key",
  #     copy_source_range: "bytes=0-#{size}", # off-by-one?
  #   )

    { part_number: part_number, etag: r.etag }
  end

  completion = s3_client.complete_multipart_upload(
    bucket: bucket,
    key: key,
    upload_id: upload.upload_id,
    multipart_upload: {
      parts: parts,
    },
  )
  # p completion
  puts completion.etag
end

def expect_success_with_sizes(part_sizes)
  begin
    try_multipart_with_sizes(part_sizes)
  rescue Exception => e
    puts "Unexpected error: #{e}"
    @fail = true
  end
end

def expect_failure_with_sizes(part_sizes)
  begin
    try_multipart_with_sizes(part_sizes)
    puts "Unexpected success"
    @fail = true
  rescue Exception => e
    puts "Probably-expected fail: #{e}"
  end
end

@fail = false
expect_success_with_sizes([ 3 ])
expect_success_with_sizes([ 0 ])
expect_success_with_sizes([ MIN_PART_SIZE-1 ])
expect_failure_with_sizes([ MIN_PART_SIZE-1, 0 ])
expect_failure_with_sizes([ MIN_PART_SIZE-1, 3 ])
expect_success_with_sizes([ MIN_PART_SIZE, 3 ])
expect_success_with_sizes([ MIN_PART_SIZE, 0 ])
expect_success_with_sizes([ MIN_PART_SIZE+1, 3 ])
expect_success_with_sizes([ MIN_PART_SIZE+1, 0 ])
expect_success_with_sizes([ MIN_PART_SIZE, MIN_PART_SIZE, 3 ])
expect_success_with_sizes([ MIN_PART_SIZE, MIN_PART_SIZE+1, 3 ])
exit 1 if @fail

# eof test-multipart-upload
